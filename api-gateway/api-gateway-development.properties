spring.application.name=api-gateway
#spring.cloud.config.uri=http://localhost:8888
#management.endpoints.web.exposure.include=*
server.port=8080
#eureka.client.service-url.defaultZone=http://localhost:8761/eureka/

## PostgreSQL
spring.datasource.url=jdbc:postgresql://localhost:3307/postgres
spring.datasource.username=postgres
spring.datasource.password=nimda
spring.datasource.type=com.zaxxer.hikari.HikariDataSource
# Hikari will use the above plus the following to setup connection pooling
spring.datasource.hikari.minimumIdle=3
spring.datasource.hikari.maximumPoolSize=500
spring.datasource.hikari.idleTimeout=30000
spring.datasource.hikari.poolName=SpringBootJPAHikariCP
spring.datasource.hikari.maxLifetime=2000000
spring.datasource.hikari.connectionTimeout=30000
spring.datasource.pool-prepared-statements=true
spring.datasource.max-open-prepared-statements=250
spring.jpa.hibernate.connection.provider_class=org.hibernate.hikaricp.internal.HikariCPConnectionProvider
spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.PostgreSQL82Dialect

#Hibernate Configuration
spring.jpa.generate-ddl = true
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true

server.error.include-stacktrace=never


#feign.hystrix.enabled=true
#hystrix.shareSecurityContext=true

#ignore services all
zuul.ignored-services: '*'
#All url come with prefix/api will interpret
zuul.prefix=/api

zuul.routes.user-management-service.path=/user-management-service/**
zuul.routes.user-management-service.sensitive-headers
zuul.routes.user-management-service.service-id=user-management-service

zuul.routes.tsp-management-service.path=/tsp-management-service/**
zuul.routes.tsp-management-service.sensitive-headers
zuul.routes.tsp-management-service.service-id=tsp-management-service

zuul.routes.otp-service.path=/otp-service/**
zuul.routes.otp-service.sensitive-headers
zuul.routes.otp-service.service-id=otp-service